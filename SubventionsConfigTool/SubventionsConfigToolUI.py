# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'qt_designs/SubventionsConfigTool.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import pickle
import logging
from logging.handlers import RotatingFileHandler
from PyQt5 import QtCore, QtGui, QtWidgets

handler = RotatingFileHandler('SubventionsConfigTool.log', maxBytes = 5000000, backupCount = 2)
logging.basicConfig(handlers = [handler], format = '%(asctime)s <%(levelname)s> %(message)s', level = logging.DEBUG)


class CheckableComboBox(QtWidgets.QComboBox):
    # Subclass Delegate to increase item height
    class Delegate(QtWidgets.QStyledItemDelegate):
        def sizeHint(self, option, index):
            size = super().sizeHint(option, index)
            size.setHeight(20)
            return size

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # Make the combo editable to set a custom text, but readonly
        self.setEditable(True)
        self.lineEdit().setReadOnly(True)
        # Make the lineedit the same color as QPushButton
        palette = QtWidgets.qApp.palette()
        palette.setBrush(QtGui.QPalette.Base, palette.button())
        self.lineEdit().setPalette(palette)

        # Use custom delegate
        self.setItemDelegate(CheckableComboBox.Delegate())

        # Update the text when an item is toggled
        self.model().dataChanged.connect(self.updateText)

        # Hide and show popup when clicking the line edit
        self.lineEdit().installEventFilter(self)
        self.closeOnLineEditClick = False

        # Prevent popup from closing when clicking on an item
        self.view().viewport().installEventFilter(self)

    def resizeEvent(self, event):
        # Recompute text to elide as needed
        self.updateText()
        super().resizeEvent(event)

    def eventFilter(self, object, event):

        if object == self.lineEdit():
            if event.type() == QtCore.QEvent.MouseButtonRelease:
                if self.closeOnLineEditClick:
                    self.hidePopup()
                else:
                    self.showPopup()
                return True
            return False

        if object == self.view().viewport():
            if event.type() == QtCore.QEvent.MouseButtonRelease:
                index = self.view().indexAt(event.pos())
                item = self.model().item(index.row())

                if item.checkState() == QtCore.Qt.Checked:
                    item.setCheckState(QtCore.Qt.Unchecked)
                else:
                    item.setCheckState(QtCore.Qt.Checked)
                return True
        return False

    def showPopup(self):
        super().showPopup()
        # When the popup is displayed, a click on the lineedit should close it
        self.closeOnLineEditClick = True

    def hidePopup(self):
        super().hidePopup()
        # Used to prevent immediate reopening when clicking on the lineEdit
        self.startTimer(100)
        # Refresh the display text when closing
        self.updateText()

    def timerEvent(self, event):
        # After timeout, kill timer, and reenable click on line edit
        self.killTimer(event.timerId())
        self.closeOnLineEditClick = False

    def updateText(self):
        texts = []
        for i in range(self.model().rowCount()):
            if self.model().item(i).checkState() == QtCore.Qt.Checked:
                texts.append(self.model().item(i).text())
        text = ", ".join(texts)

        # Compute elided text (with "...")
        metrics = QtGui.QFontMetrics(self.lineEdit().font())
        elidedText = metrics.elidedText(text, QtCore.Qt.ElideRight, self.lineEdit().width())
        self.lineEdit().setText(elidedText)

    def addItem(self, text, data = None):
        item = QtGui.QStandardItem()
        item.setText(text)
        if data is None:
            item.setData(text)
        else:
            item.setData(data)
        item.setFlags(QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsUserCheckable)
        item.setData(QtCore.Qt.Unchecked, QtCore.Qt.CheckStateRole)
        self.model().appendRow(item)

    def addItems(self, texts, datalist = None):
        for i, text in enumerate(texts):
            try:
                data = datalist[i]
            except (TypeError, IndexError):
                data = None
            self.addItem(text, data)

    def currentData(self):
        # Return the list of selected items data
        res = []
        for i in range(self.model().rowCount()):
            if self.model().item(i).checkState() == QtCore.Qt.Checked:
                res.append(self.model().item(i).data())
        return res


class Ui_MainWindow(object):
    def __init__(self):
        self.attributeEditionEnabled = False
        self.subventionEditionEnabled = False
        self.previousAttributeName = None
        self.previousSubventionName = None
        self.attributes = {}
        self.subventions = {}
        self.filename = None
        self.isEdited = False
        self.messagebox = QtWidgets.QMessageBox()

    def setupUi(self, MainWindow):
        self.mainWindow = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(900, 700)
        MainWindow.setMinimumSize(QtCore.QSize(500, 300))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./icons/icons8-configuración-3-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        MainWindow.setWindowIcon(icon)
        MainWindow.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.mainLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.mainLayout.setContentsMargins(5, 5, 5, 5)
        self.mainLayout.setObjectName("mainLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.attributesTab = QtWidgets.QWidget()
        self.attributesTab.setObjectName("attributesTab")
        self.tabWidgetLayout = QtWidgets.QHBoxLayout(self.attributesTab)
        self.tabWidgetLayout.setContentsMargins(5, 5, 5, 5)
        self.tabWidgetLayout.setObjectName("tabWidgetLayout")
        self.attributesLeftFrame = QtWidgets.QFrame(self.attributesTab)
        self.attributesLeftFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.attributesLeftFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.attributesLeftFrame.setObjectName("attributesLeftFrame")
        self.attributesLeftLayout = QtWidgets.QVBoxLayout(self.attributesLeftFrame)
        self.attributesLeftLayout.setContentsMargins(5, 5, 5, 5)
        self.attributesLeftLayout.setObjectName("attributesLeftLayout")
        self.attributesButtonFrame = QtWidgets.QFrame(self.attributesLeftFrame)
        self.attributesButtonFrame.setMinimumSize(QtCore.QSize(50, 40))
        self.attributesButtonFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.attributesButtonFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.attributesButtonFrame.setObjectName("attributesButtonFrame")
        self.newAttributeButton = QtWidgets.QPushButton(self.attributesButtonFrame)
        self.newAttributeButton.setGeometry(QtCore.QRect(10, 10, 25, 24))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.newAttributeButton.sizePolicy().hasHeightForWidth())
        self.newAttributeButton.setSizePolicy(sizePolicy)
        self.newAttributeButton.setMaximumSize(QtCore.QSize(25, 25))
        self.newAttributeButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("./icons/icons8-añadir-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.newAttributeButton.setIcon(icon1)
        self.newAttributeButton.setObjectName("newAttributeButton")
        self.deleteAttributeButton = QtWidgets.QPushButton(self.attributesButtonFrame)
        self.deleteAttributeButton.setGeometry(QtCore.QRect(41, 10, 25, 24))
        self.deleteAttributeButton.setMaximumSize(QtCore.QSize(25, 25))
        self.deleteAttributeButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("./icons/icons8-eliminar-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.deleteAttributeButton.setIcon(icon2)
        self.deleteAttributeButton.setObjectName("deleteAttributeButton")
        self.editAttributeButton = QtWidgets.QPushButton(self.attributesButtonFrame)
        self.editAttributeButton.setGeometry(QtCore.QRect(72, 10, 25, 24))
        self.editAttributeButton.setMaximumSize(QtCore.QSize(25, 25))
        self.editAttributeButton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("./icons/icons8-editar-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.editAttributeButton.setIcon(icon3)
        self.editAttributeButton.setObjectName("editAttributeButton")
        self.saveAttributeButton = QtWidgets.QPushButton(self.attributesButtonFrame)
        self.saveAttributeButton.setGeometry(QtCore.QRect(103, 10, 25, 24))
        self.saveAttributeButton.setMaximumSize(QtCore.QSize(25, 25))
        self.saveAttributeButton.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("./icons/icons8-guardar-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.saveAttributeButton.setIcon(icon4)
        self.saveAttributeButton.setObjectName("saveAttributeButton")
        self.attributesLeftLayout.addWidget(self.attributesButtonFrame)
        self.attributesListWidget = QtWidgets.QListWidget(self.attributesLeftFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.attributesListWidget.sizePolicy().hasHeightForWidth())
        self.attributesListWidget.setSizePolicy(sizePolicy)
        self.attributesListWidget.setObjectName("attributesListWidget")
        self.attributesLeftLayout.addWidget(self.attributesListWidget)
        self.tabWidgetLayout.addWidget(self.attributesLeftFrame)
        self.attributesRightFrame = QtWidgets.QFrame(self.attributesTab)
        self.attributesRightFrame.setToolTip("")
        self.attributesRightFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.attributesRightFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.attributesRightFrame.setObjectName("attributesRightFrame")
        self.attributesRigthLayout = QtWidgets.QVBoxLayout(self.attributesRightFrame)
        self.attributesRigthLayout.setContentsMargins(5, 5, 5, 5)
        self.attributesRigthLayout.setObjectName("attributesRigthLayout")
        self.attributesRightTopFrame = QtWidgets.QFrame(self.attributesRightFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.attributesRightTopFrame.sizePolicy().hasHeightForWidth())
        self.attributesRightTopFrame.setSizePolicy(sizePolicy)
        self.attributesRightTopFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.attributesRightTopFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.attributesRightTopFrame.setObjectName("attributesRightTopFrame")
        self.attributesRightTopLayout = QtWidgets.QFormLayout(self.attributesRightTopFrame)
        self.attributesRightTopLayout.setContentsMargins(5, 5, 5, 5)
        self.attributesRightTopLayout.setObjectName("attributesRightTopLayout")
        self.attributeNameLabel = QtWidgets.QLabel(self.attributesRightTopFrame)
        self.attributeNameLabel.setObjectName("attributeNameLabel")
        self.attributesRightTopLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.attributeNameLabel)
        self.attributeNameField = QtWidgets.QLineEdit(self.attributesRightTopFrame)
        self.attributeNameField.setEnabled(False)
        self.attributeNameField.setObjectName("attributeNameField")
        self.attributesRightTopLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.attributeNameField)
        self.attributeQuestionLabel = QtWidgets.QLabel(self.attributesRightTopFrame)
        self.attributeQuestionLabel.setObjectName("attributeQuestionLabel")
        self.attributesRightTopLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.attributeQuestionLabel)
        self.attributeQuestionField = QtWidgets.QTextEdit(self.attributesRightTopFrame)
        self.attributeQuestionField.setEnabled(False)
        self.attributeQuestionField.setMaximumSize(QtCore.QSize(16777215, 50))
        self.attributeQuestionField.setObjectName("attributeQuestionField")
        self.attributesRightTopLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.attributeQuestionField)
        self.attributeHelpLabel = QtWidgets.QLabel(self.attributesRightTopFrame)
        self.attributeHelpLabel.setObjectName("attributeHelpLabel")
        self.attributesRightTopLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.attributeHelpLabel)
        self.attributeHelpField = QtWidgets.QTextEdit(self.attributesRightTopFrame)
        self.attributeHelpField.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.attributeHelpField.sizePolicy().hasHeightForWidth())
        self.attributeHelpField.setSizePolicy(sizePolicy)
        self.attributeHelpField.setMaximumSize(QtCore.QSize(16777215, 50))
        self.attributeHelpField.setObjectName("attributeHelpField")
        self.attributesRightTopLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.attributeHelpField)
        self.attributeTypeLabel = QtWidgets.QLabel(self.attributesRightTopFrame)
        self.attributeTypeLabel.setObjectName("attributeTypeLabel")
        self.attributesRightTopLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.attributeTypeLabel)
        self.attributeTypeField = QtWidgets.QComboBox(self.attributesRightTopFrame)
        self.attributeTypeField.setEnabled(False)
        self.attributeTypeField.setObjectName("attributeTypeField")
        self.attributesRightTopLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.attributeTypeField)
        self.attributesRigthLayout.addWidget(self.attributesRightTopFrame)
        self.attributesRightBottomFrame = QtWidgets.QFrame(self.attributesRightFrame)
        self.attributesRightBottomFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.attributesRightBottomFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.attributesRightBottomFrame.setObjectName("attributesRightBottomFrame")
        self.attributesRightBottomLayout = QtWidgets.QVBoxLayout(self.attributesRightBottomFrame)
        self.attributesRightBottomLayout.setContentsMargins(5, 5, 5, 5)
        self.attributesRightBottomLayout.setObjectName("attributesRightBottomLayout")
        self.attributesRigthBottomButtonsFrame = QtWidgets.QFrame(self.attributesRightBottomFrame)
        self.attributesRigthBottomButtonsFrame.setMinimumSize(QtCore.QSize(50, 40))
        self.attributesRigthBottomButtonsFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.attributesRigthBottomButtonsFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.attributesRigthBottomButtonsFrame.setObjectName("attributesRigthBottomButtonsFrame")
        self.newValueButton = QtWidgets.QPushButton(self.attributesRigthBottomButtonsFrame)
        self.newValueButton.setEnabled(False)
        self.newValueButton.setGeometry(QtCore.QRect(10, 10, 25, 24))
        self.newValueButton.setMaximumSize(QtCore.QSize(25, 25))
        self.newValueButton.setText("")
        self.newValueButton.setIcon(icon1)
        self.newValueButton.setObjectName("newValueButton")
        self.deleteValueButton = QtWidgets.QPushButton(self.attributesRigthBottomButtonsFrame)
        self.deleteValueButton.setEnabled(False)
        self.deleteValueButton.setGeometry(QtCore.QRect(41, 10, 25, 24))
        self.deleteValueButton.setMaximumSize(QtCore.QSize(25, 25))
        self.deleteValueButton.setText("")
        self.deleteValueButton.setIcon(icon2)
        self.deleteValueButton.setObjectName("deleteValueButton")
        self.attributesRightBottomLayout.addWidget(self.attributesRigthBottomButtonsFrame)
        self.valuesTable = QtWidgets.QTableWidget(self.attributesRightBottomFrame)
        self.valuesTable.setEnabled(False)
        self.valuesTable.setObjectName("valuesTable")
        self.valuesTable.setColumnCount(0)
        self.valuesTable.setRowCount(0)
        self.attributesRightBottomLayout.addWidget(self.valuesTable)
        self.attributesRigthLayout.addWidget(self.attributesRightBottomFrame)
        self.tabWidgetLayout.addWidget(self.attributesRightFrame)
        self.tabWidget.addTab(self.attributesTab, "")
        self.subventionsTab = QtWidgets.QWidget()
        self.subventionsTab.setObjectName("subventionsTab")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.subventionsTab)
        self.horizontalLayout.setContentsMargins(5, 5, 5, 5)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.subventionsLeftFrame = QtWidgets.QFrame(self.subventionsTab)
        self.subventionsLeftFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.subventionsLeftFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.subventionsLeftFrame.setObjectName("subventionsLeftFrame")
        self.subventionsLeftLayout = QtWidgets.QVBoxLayout(self.subventionsLeftFrame)
        self.subventionsLeftLayout.setContentsMargins(5, 5, 5, 5)
        self.subventionsLeftLayout.setObjectName("subventionsLeftLayout")
        self.subventionsButtonFrame = QtWidgets.QFrame(self.subventionsLeftFrame)
        self.subventionsButtonFrame.setMinimumSize(QtCore.QSize(50, 40))
        self.subventionsButtonFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.subventionsButtonFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.subventionsButtonFrame.setObjectName("subventionsButtonFrame")
        self.newSubventionButton = QtWidgets.QPushButton(self.subventionsButtonFrame)
        self.newSubventionButton.setGeometry(QtCore.QRect(10, 10, 25, 24))
        self.newSubventionButton.setMinimumSize(QtCore.QSize(2, 0))
        self.newSubventionButton.setMaximumSize(QtCore.QSize(25, 25))
        self.newSubventionButton.setText("")
        self.newSubventionButton.setIcon(icon1)
        self.newSubventionButton.setObjectName("newSubventionButton")
        self.deleteSubventionButton = QtWidgets.QPushButton(self.subventionsButtonFrame)
        self.deleteSubventionButton.setGeometry(QtCore.QRect(41, 10, 25, 24))
        self.deleteSubventionButton.setMaximumSize(QtCore.QSize(25, 25))
        self.deleteSubventionButton.setText("")
        self.deleteSubventionButton.setIcon(icon2)
        self.deleteSubventionButton.setObjectName("deleteSubventionButton")
        self.editSubventionButton = QtWidgets.QPushButton(self.subventionsButtonFrame)
        self.editSubventionButton.setGeometry(QtCore.QRect(72, 10, 25, 24))
        self.editSubventionButton.setMaximumSize(QtCore.QSize(25, 25))
        self.editSubventionButton.setText("")
        self.editSubventionButton.setIcon(icon3)
        self.editSubventionButton.setObjectName("editSubventionButton")
        self.saveSubventionButton = QtWidgets.QPushButton(self.subventionsButtonFrame)
        self.saveSubventionButton.setEnabled(False)
        self.saveSubventionButton.setGeometry(QtCore.QRect(103, 10, 25, 24))
        self.saveSubventionButton.setMaximumSize(QtCore.QSize(25, 25))
        self.saveSubventionButton.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("./icons/icons8-guardar-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.saveSubventionButton.setIcon(icon5)
        self.saveSubventionButton.setObjectName("saveSubventionButton")
        self.subventionsLeftLayout.addWidget(self.subventionsButtonFrame)
        self.subventionsListWidget = QtWidgets.QListWidget(self.subventionsLeftFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.subventionsListWidget.sizePolicy().hasHeightForWidth())
        self.subventionsListWidget.setSizePolicy(sizePolicy)
        self.subventionsListWidget.setObjectName("subventionsListWidget")
        self.subventionsLeftLayout.addWidget(self.subventionsListWidget)
        self.horizontalLayout.addWidget(self.subventionsLeftFrame)
        self.subventionsRightFrame = QtWidgets.QFrame(self.subventionsTab)
        self.subventionsRightFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.subventionsRightFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.subventionsRightFrame.setObjectName("subventionsRightFrame")
        self.subventionsRightLayout = QtWidgets.QVBoxLayout(self.subventionsRightFrame)
        self.subventionsRightLayout.setContentsMargins(5, 5, 5, 5)
        self.subventionsRightLayout.setObjectName("subventionsRightLayout")
        self.subventionsRightTopFrame = QtWidgets.QFrame(self.subventionsRightFrame)
        self.subventionsRightTopFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.subventionsRightTopFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.subventionsRightTopFrame.setObjectName("subventionsRightTopFrame")
        self.subventionsRightTopLayout = QtWidgets.QFormLayout(self.subventionsRightTopFrame)
        self.subventionsRightTopLayout.setContentsMargins(5, 5, 5, 5)
        self.subventionsRightTopLayout.setObjectName("subventionsRightTopLayout")
        self.subventionActiveLabel = QtWidgets.QLabel(self.subventionsRightTopFrame)
        self.subventionActiveLabel.setObjectName("subventionActiveLabel")
        self.subventionsRightTopLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.subventionActiveLabel)
        self.subventionActiveField = QtWidgets.QCheckBox(self.subventionsRightTopFrame)
        self.subventionActiveField.setEnabled(False)
        self.subventionActiveField.setText("")
        self.subventionActiveField.setObjectName("subventionActiveField")
        self.subventionsRightTopLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.subventionActiveField)
        self.subventionNameLabel = QtWidgets.QLabel(self.subventionsRightTopFrame)
        self.subventionNameLabel.setObjectName("subventionNameLabel")
        self.subventionsRightTopLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.subventionNameLabel)
        self.subventionNameField = QtWidgets.QLineEdit(self.subventionsRightTopFrame)
        self.subventionNameField.setEnabled(False)
        self.subventionNameField.setObjectName("subventionNameField")
        self.subventionsRightTopLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.subventionNameField)
        self.subventionTitleLabel = QtWidgets.QLabel(self.subventionsRightTopFrame)
        self.subventionTitleLabel.setObjectName("subventionTitleLabel")
        self.subventionsRightTopLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.subventionTitleLabel)
        self.subventionTitleField = QtWidgets.QTextEdit(self.subventionsRightTopFrame)
        self.subventionTitleField.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.subventionTitleField.sizePolicy().hasHeightForWidth())
        self.subventionTitleField.setSizePolicy(sizePolicy)
        self.subventionTitleField.setMaximumSize(QtCore.QSize(16777215, 50))
        self.subventionTitleField.setObjectName("subventionTitleField")
        self.subventionsRightTopLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.subventionTitleField)
        self.subventionLawLabel = QtWidgets.QLabel(self.subventionsRightTopFrame)
        self.subventionLawLabel.setObjectName("subventionLawLabel")
        self.subventionsRightTopLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.subventionLawLabel)
        self.subventionLawField = QtWidgets.QTextEdit(self.subventionsRightTopFrame)
        self.subventionLawField.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.subventionLawField.sizePolicy().hasHeightForWidth())
        self.subventionLawField.setSizePolicy(sizePolicy)
        self.subventionLawField.setMaximumSize(QtCore.QSize(16777215, 50))
        self.subventionLawField.setObjectName("subventionLawField")
        self.subventionsRightTopLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.subventionLawField)
        self.subventionDescriptionLabel = QtWidgets.QLabel(self.subventionsRightTopFrame)
        self.subventionDescriptionLabel.setObjectName("subventionDescriptionLabel")
        self.subventionsRightTopLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.subventionDescriptionLabel)
        self.subventionDescriptionField = QtWidgets.QTextEdit(self.subventionsRightTopFrame)
        self.subventionDescriptionField.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.subventionDescriptionField.sizePolicy().hasHeightForWidth())
        self.subventionDescriptionField.setSizePolicy(sizePolicy)
        self.subventionDescriptionField.setMaximumSize(QtCore.QSize(16777215, 50))
        self.subventionDescriptionField.setObjectName("subventionDescriptionField")
        self.subventionsRightTopLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.subventionDescriptionField)
        self.subventionLawURLLabel = QtWidgets.QLabel(self.subventionsRightTopFrame)
        self.subventionLawURLLabel.setObjectName("subventionLawURLLabel")
        self.subventionsRightTopLayout.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.subventionLawURLLabel)
        self.subventionLawURLField = QtWidgets.QLineEdit(self.subventionsRightTopFrame)
        self.subventionLawURLField.setEnabled(False)
        self.subventionLawURLField.setObjectName("subventionLawURLField")
        self.subventionsRightTopLayout.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.subventionLawURLField)
        self.subventionRequestURLLabel = QtWidgets.QLabel(self.subventionsRightTopFrame)
        self.subventionRequestURLLabel.setObjectName("subventionRequestURLLabel")
        self.subventionsRightTopLayout.setWidget(6, QtWidgets.QFormLayout.LabelRole, self.subventionRequestURLLabel)
        self.subventionRequestURLField = QtWidgets.QLineEdit(self.subventionsRightTopFrame)
        self.subventionRequestURLField.setEnabled(False)
        self.subventionRequestURLField.setObjectName("subventionRequestURLField")
        self.subventionsRightTopLayout.setWidget(6, QtWidgets.QFormLayout.FieldRole, self.subventionRequestURLField)
        self.subventionIncompatibilitiesLabel = QtWidgets.QLabel(self.subventionsRightTopFrame)
        self.subventionIncompatibilitiesLabel.setObjectName("subventionIncompatibilitiesLabel")
        self.subventionsRightTopLayout.setWidget(7, QtWidgets.QFormLayout.LabelRole, self.subventionIncompatibilitiesLabel)
        self.subventionIncompatibilitiesField = QtWidgets.QTextEdit(self.subventionsRightTopFrame)
        self.subventionIncompatibilitiesField.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.subventionIncompatibilitiesField.sizePolicy().hasHeightForWidth())
        self.subventionIncompatibilitiesField.setSizePolicy(sizePolicy)
        self.subventionIncompatibilitiesField.setMaximumSize(QtCore.QSize(16777215, 50))
        self.subventionIncompatibilitiesField.setObjectName("subventionIncompatibilitiesField")
        self.subventionsRightTopLayout.setWidget(7, QtWidgets.QFormLayout.FieldRole, self.subventionIncompatibilitiesField)
        self.subventionsRightLayout.addWidget(self.subventionsRightTopFrame)
        self.subventionsRightBottomFrame = QtWidgets.QFrame(self.subventionsRightFrame)
        self.subventionsRightBottomFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.subventionsRightBottomFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.subventionsRightBottomFrame.setObjectName("subventionsRightBottomFrame")
        self.subventionsRightBottomLayout = QtWidgets.QVBoxLayout(self.subventionsRightBottomFrame)
        self.subventionsRightBottomLayout.setContentsMargins(5, 5, 5, 5)
        self.subventionsRightBottomLayout.setObjectName("subventionsRightBottomLayout")
        self.subventionsRuleButtonFrame = QtWidgets.QFrame(self.subventionsRightBottomFrame)
        self.subventionsRuleButtonFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.subventionsRuleButtonFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.subventionsRuleButtonFrame.setObjectName("subventionsRuleButtonFrame")
        self.subventionConditionsButtonsLayout = QtWidgets.QHBoxLayout(self.subventionsRuleButtonFrame)
        self.subventionConditionsButtonsLayout.setContentsMargins(5, 5, 5, 5)
        self.subventionConditionsButtonsLayout.setObjectName("subventionConditionsButtonsLayout")
        self.newAndConditionButton = QtWidgets.QPushButton(self.subventionsRuleButtonFrame)
        self.newAndConditionButton.setEnabled(False)
        self.newAndConditionButton.setMaximumSize(QtCore.QSize(25, 25))
        self.newAndConditionButton.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("./icons/icons8-agregar-a-favoritos-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.newAndConditionButton.setIcon(icon6)
        self.newAndConditionButton.setObjectName("newAndConditionButton")
        self.subventionConditionsButtonsLayout.addWidget(self.newAndConditionButton)
        self.newOrConditionButton = QtWidgets.QPushButton(self.subventionsRuleButtonFrame)
        self.newOrConditionButton.setEnabled(False)
        self.newOrConditionButton.setMaximumSize(QtCore.QSize(25, 25))
        self.newOrConditionButton.setText("")
        self.newOrConditionButton.setIcon(icon1)
        self.newOrConditionButton.setObjectName("newConditionButton")
        self.subventionConditionsButtonsLayout.addWidget(self.newOrConditionButton)
        self.deleteConditionButton = QtWidgets.QPushButton(self.subventionsRuleButtonFrame)
        self.deleteConditionButton.setEnabled(False)
        self.deleteConditionButton.setMaximumSize(QtCore.QSize(25, 25))
        self.deleteConditionButton.setText("")
        self.deleteConditionButton.setIcon(icon2)
        self.deleteConditionButton.setObjectName("deleteConditionButton")
        self.subventionConditionsButtonsLayout.addWidget(self.deleteConditionButton)
        self.attributeComboBox = QtWidgets.QComboBox(self.subventionsRuleButtonFrame)
        self.attributeComboBox.setEnabled(False)
        self.attributeComboBox.setObjectName("attributeComboBox")
        self.subventionConditionsButtonsLayout.addWidget(self.attributeComboBox)
        self.operatorComboBox = QtWidgets.QComboBox(self.subventionsRuleButtonFrame)
        self.operatorComboBox.setEnabled(False)
        self.operatorComboBox.setObjectName("operatorComboBox")
        self.subventionConditionsButtonsLayout.addWidget(self.operatorComboBox)
        self.valuesComboBox = CheckableComboBox(self.subventionsRuleButtonFrame)
        self.valuesComboBox.setEnabled(False)
        self.valuesComboBox.setObjectName("valuesComboBox")
        self.subventionConditionsButtonsLayout.addWidget(self.valuesComboBox)
        self.conditionValueField = QtWidgets.QLineEdit(self.subventionsRuleButtonFrame)
        self.conditionValueField.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.conditionValueField.sizePolicy().hasHeightForWidth())
        self.conditionValueField.setSizePolicy(sizePolicy)
        self.conditionValueField.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.conditionValueField.setObjectName("conditionValueField")
        self.subventionConditionsButtonsLayout.addWidget(self.conditionValueField)
        self.subventionsRightBottomLayout.addWidget(self.subventionsRuleButtonFrame)
        self.subventionRulesWidget = QtWidgets.QTreeWidget(self.subventionsRightBottomFrame)
        self.subventionRulesWidget.setEnabled(False)
        self.subventionRulesWidget.setAnimated(True)
        self.subventionRulesWidget.setColumnCount(0)
        self.subventionRulesWidget.setObjectName("subventionRulesWidget")
        self.subventionRulesWidget.header().setCascadingSectionResizes(True)
        self.subventionRulesWidget.header().setHighlightSections(True)
        self.subventionRulesWidget.header().setSortIndicatorShown(True)
        self.subventionsRightBottomLayout.addWidget(self.subventionRulesWidget)
        self.subventionsRightLayout.addWidget(self.subventionsRightBottomFrame)
        self.horizontalLayout.addWidget(self.subventionsRightFrame)
        self.tabWidget.addTab(self.subventionsTab, "")
        self.mainLayout.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 888, 21))
        self.menubar.setObjectName("menubar")
        self.menuArchivo = QtWidgets.QMenu(self.menubar)
        self.menuArchivo.setObjectName("menuArchivo")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.actionNuevo = QtWidgets.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("./icons/icons8-ver-detalles-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNuevo.setIcon(icon7)
        self.actionNuevo.setObjectName("actionNuevo")
        self.actionAbrir = QtWidgets.QAction(MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("./icons/icons8-carpeta-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAbrir.setIcon(icon8)
        self.actionAbrir.setObjectName("actionAbrir")
        self.actionGuardar = QtWidgets.QAction(MainWindow)
        self.actionGuardar.setIcon(icon5)
        self.actionGuardar.setObjectName("actionGuardar")
        self.actionSalir = QtWidgets.QAction(MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("./icons/icons8-salida-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSalir.setIcon(icon9)
        self.actionSalir.setObjectName("actionSalir")
        self.actionGuardar_como = QtWidgets.QAction(MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("./icons/icons8-guardar-como-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionGuardar_como.setIcon(icon10)
        self.actionGuardar_como.setObjectName("actionGuardar_como")
        self.actionAcerca_de = QtWidgets.QAction(MainWindow)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("./icons/icons8-información-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAcerca_de.setIcon(icon11)
        self.actionAcerca_de.setObjectName("actionAcerda_de")
        self.menuArchivo.addAction(self.actionNuevo)
        self.menuArchivo.addSeparator()
        self.menuArchivo.addAction(self.actionAbrir)
        self.menuArchivo.addSeparator()
        self.menuArchivo.addAction(self.actionGuardar)
        self.menuArchivo.addAction(self.actionGuardar_como)
        self.menuArchivo.addSeparator()
        self.menuArchivo.addAction(self.actionSalir)
        self.menubar.addAction(self.menuArchivo.menuAction())
        self.menubar.addAction(self.actionAcerca_de)
        self.toolBar.addAction(self.actionNuevo)
        self.toolBar.addAction(self.actionAbrir)
        self.toolBar.addAction(self.actionGuardar)
        self.toolBar.addAction(self.actionGuardar_como)
        self.toolBar.addAction(self.actionSalir)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.tabWidget, self.newAttributeButton)
        MainWindow.setTabOrder(self.newAttributeButton, self.deleteAttributeButton)
        MainWindow.setTabOrder(self.deleteAttributeButton, self.editAttributeButton)
        MainWindow.setTabOrder(self.editAttributeButton, self.saveAttributeButton)
        MainWindow.setTabOrder(self.saveAttributeButton, self.attributesListWidget)
        MainWindow.setTabOrder(self.attributesListWidget, self.attributeNameField)
        MainWindow.setTabOrder(self.attributeNameField, self.attributeQuestionField)
        MainWindow.setTabOrder(self.attributeQuestionField, self.attributeHelpField)
        MainWindow.setTabOrder(self.attributeHelpField, self.attributeTypeField)
        MainWindow.setTabOrder(self.attributeTypeField, self.newValueButton)
        MainWindow.setTabOrder(self.newValueButton, self.deleteValueButton)
        MainWindow.setTabOrder(self.deleteValueButton, self.valuesTable)
        MainWindow.setTabOrder(self.valuesTable, self.newSubventionButton)
        MainWindow.setTabOrder(self.newSubventionButton, self.deleteSubventionButton)
        MainWindow.setTabOrder(self.deleteSubventionButton, self.editSubventionButton)
        MainWindow.setTabOrder(self.editSubventionButton, self.saveSubventionButton)
        MainWindow.setTabOrder(self.saveSubventionButton, self.subventionsListWidget)
        MainWindow.setTabOrder(self.subventionsListWidget, self.subventionActiveField)
        MainWindow.setTabOrder(self.subventionActiveField, self.subventionNameField)
        MainWindow.setTabOrder(self.subventionNameField, self.subventionTitleField)
        MainWindow.setTabOrder(self.subventionTitleField, self.subventionLawField)
        MainWindow.setTabOrder(self.subventionLawField, self.subventionDescriptionField)
        MainWindow.setTabOrder(self.subventionDescriptionField, self.subventionLawURLField)
        MainWindow.setTabOrder(self.subventionLawURLField, self.subventionRequestURLField)
        MainWindow.setTabOrder(self.subventionRequestURLField, self.subventionIncompatibilitiesField)
        MainWindow.setTabOrder(self.subventionIncompatibilitiesField, self.newAndConditionButton)
        MainWindow.setTabOrder(self.newAndConditionButton, self.newOrConditionButton)
        MainWindow.setTabOrder(self.newOrConditionButton, self.attributeComboBox)
        MainWindow.setTabOrder(self.attributeComboBox, self.operatorComboBox)
        MainWindow.setTabOrder(self.operatorComboBox, self.valuesComboBox)
        MainWindow.setTabOrder(self.valuesComboBox, self.conditionValueField)
        MainWindow.setTabOrder(self.conditionValueField, self.subventionRulesWidget)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Configurador de Prestaciones"))
        self.newAttributeButton.setToolTip(_translate("MainWindow", "Nuevo atributo"))
        self.deleteAttributeButton.setToolTip(_translate("MainWindow", "Eliminar atributo"))
        self.editAttributeButton.setToolTip(_translate("MainWindow", "Editar atributo"))
        self.saveAttributeButton.setToolTip(_translate("MainWindow", "Guardar cambios del atributo"))
        self.attributesListWidget.setSortingEnabled(True)
        self.attributeNameLabel.setText(_translate("MainWindow", "Nombre:"))
        self.attributeNameField.setToolTip(_translate("MainWindow", "Nombre del atributo, preferiblemente sin espacios."))
        self.attributeQuestionLabel.setText(_translate("MainWindow", "Pregunta:"))
        self.attributeQuestionField.setToolTip(_translate("MainWindow", "Es la pregunta que se solicitará al usuario para recabar este atributo."))
        self.attributeHelpLabel.setText(_translate("MainWindow", "Ayuda:"))
        self.attributeHelpField.setToolTip(_translate("MainWindow", "Descripción detalla del atributo."))
        self.attributeTypeLabel.setText(_translate("MainWindow", "Tipo de atributo:"))
        self.attributeTypeField.setToolTip(_translate("MainWindow", "Tipo de atributo"))
        self.newValueButton.setToolTip(_translate("MainWindow", "Nuevo valor"))
        self.deleteValueButton.setToolTip(_translate("MainWindow", "Eliminar valor"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.attributesTab), _translate("MainWindow", "Atributos"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.attributesTab), _translate("MainWindow", "Configuración de los atributos"))
        self.newSubventionButton.setToolTip(_translate("MainWindow", "Crear nueva prestación"))
        self.deleteSubventionButton.setToolTip(_translate("MainWindow", "Eliminar Prestación"))
        self.editSubventionButton.setToolTip(_translate("MainWindow", "Editar prestación"))
        self.saveSubventionButton.setToolTip(_translate("MainWindow", "Guardar prestación"))
        self.subventionActiveLabel.setText(_translate("MainWindow", "Activa:"))
        self.subventionActiveField.setToolTip(_translate("MainWindow", "Si la prestación está vigente o no"))
        self.subventionNameLabel.setText(_translate("MainWindow", "Nombre:"))
        self.subventionNameField.setToolTip(_translate("MainWindow", "Nombre corto de la prestación"))
        self.subventionTitleLabel.setText(_translate("MainWindow", "Título:"))
        self.subventionTitleField.setToolTip(_translate("MainWindow", "Titulo de la prestación"))
        self.subventionLawLabel.setText(_translate("MainWindow", "Ley:"))
        self.subventionLawField.setToolTip(_translate("MainWindow", "Ley asociada a la prestación"))
        self.subventionDescriptionLabel.setText(_translate("MainWindow", "Descripción:"))
        self.subventionDescriptionField.setToolTip(_translate("MainWindow", "Descripción detallada del alcance de la prestación"))
        self.subventionLawURLLabel.setText(_translate("MainWindow", "URL Ley:"))
        self.subventionLawURLField.setToolTip(_translate("MainWindow", "URL a la ley donde se detalla la prestación"))
        self.subventionRequestURLLabel.setText(_translate("MainWindow", "URL Solicitud:"))
        self.subventionRequestURLField.setToolTip(_translate("MainWindow", "URL a donde se puede solicitar la prestación"))
        self.subventionIncompatibilitiesLabel.setText(_translate("MainWindow", "Incompatibilidades:"))
        self.newAndConditionButton.setToolTip(_translate("MainWindow", "Añadir nueva regla"))
        self.newOrConditionButton.setToolTip(_translate("MainWindow", "Añadir nueva condición"))
        self.deleteConditionButton.setToolTip(_translate("MainWindow", "Eliminar condición"))
        self.attributeComboBox.setToolTip(_translate("MainWindow", "Atributo de la condición"))
        self.operatorComboBox.setToolTip(_translate("MainWindow", "Tipo de condición"))
        self.valuesComboBox.setToolTip(_translate("MainWindow", "Valor del atributo"))
        self.conditionValueField.setToolTip(_translate("MainWindow", "Valor del abributo"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.subventionsTab), _translate("MainWindow", "Prestaciones"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.subventionsTab), _translate("MainWindow", "Configuración de las prestaciones"))
        self.menuArchivo.setTitle(_translate("MainWindow", "Archivo"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionNuevo.setText(_translate("MainWindow", "Nuevo"))
        self.actionNuevo.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionAbrir.setText(_translate("MainWindow", "Abrir"))
        self.actionAbrir.setShortcut(_translate("MainWindow", "Ctrl+A"))
        self.actionGuardar.setText(_translate("MainWindow", "Guardar"))
        self.actionGuardar.setShortcut(_translate("MainWindow", "Ctrl+G"))
        self.actionSalir.setText(_translate("MainWindow", "Salir"))
        self.actionSalir.setShortcut(_translate("MainWindow", "Ctrl+X"))
        self.actionAcerca_de.setText(_translate("MainWindow", "Acerca de..."))
        self.actionAcerca_de.setShortcut(_translate("MainWindow", "Ctrl+I"))
        self.actionGuardar_como.setText(_translate("MainWindow", "Guardar como..."))
        self.actionGuardar_como.setShortcut(_translate("MainWindow", "Ctrl+S"))

    def customUI(self):
        self.attributeQuestionField.setTabChangesFocus(True)
        self.attributeHelpField.setTabChangesFocus(True)
        self.subventionTitleField.setTabChangesFocus(True)
        self.subventionDescriptionField.setTabChangesFocus(True)
        self.subventionLawField.setTabChangesFocus(True)
        self.subventionIncompatibilitiesField.setTabChangesFocus(True)
        self.attributesListWidget.setSortingEnabled(True)
        self.subventionsListWidget.setSortingEnabled(True)
        self.actionAbrir.triggered.connect(self.openFile)
        self.actionGuardar.triggered.connect(self.saveFile)
        self.actionGuardar_como.triggered.connect(self.saveFileAs)
        self.actionNuevo.triggered.connect(self.newFile)
        self.actionSalir.triggered.connect(self.exit)
        self.actionAcerca_de.triggered.connect(self.about)
        self.attributesListWidget.itemSelectionChanged.connect(self.loadAttributeData)
        self.subventionsListWidget.itemSelectionChanged.connect(self.loadSubventionData)
        self.newAttributeButton.clicked.connect(self.newAttributeData)
        self.newSubventionButton.clicked.connect(self.newSubventionData)
        self.editAttributeButton.clicked.connect(self.editAttributeData)
        self.editSubventionButton.clicked.connect(self.editSubventionData)
        self.deleteAttributeButton.clicked.connect(self.deleteAttributeData)
        self.deleteSubventionButton.clicked.connect(self.deleteSubventionData)
        self.saveAttributeButton.setEnabled(False)
        self.saveAttributeButton.clicked.connect(self.saveAttributeData)
        self.saveSubventionButton.setEnabled(False)
        self.saveSubventionButton.clicked.connect(self.saveSubventionData)
        self.valuesTable.setColumnCount(2)
        self.valuesTable.setHorizontalHeaderLabels(("Valor", "Descripción"))
        self.valuesTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.attributeTypeField.addItems(("Sí/No", "Numérico", "Lista de opciones"))
        self.attributeTypeField.currentIndexChanged.connect(self.attributeValuesManager)
        self.deleteValueButton.clicked.connect(self.deleteAttributeValue)
        self.deleteConditionButton.clicked.connect(self.deleteCondition)
        self.newAndConditionButton.clicked.connect(self.newAndCondition)
        self.newOrConditionButton.clicked.connect(self.newORCondition)
        self.newValueButton.clicked.connect(self.newAttributeValue)
        self.subventionRulesWidget.setColumnCount(4)
        self.subventionRulesWidget.setHeaderLabels(("Regla", "Atributo", "Operador", "Valor"))
        self.subventionRulesWidget.header().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.operatorComboBox.addItems(("Es igual a", "Es diferente a", "Es mayor que", "Es mayor o igual que", "Es menor que", "Es menor o igual que"))
        self.attributeComboBox.currentIndexChanged.connect(self.subventionValuesManager)
        self.conditionValueField.setVisible(False)

    def setApp(self, app):
        self.app = app

    def showMessage(self, title, message, type = None, buttons = None):
        logging.info("Showing info message: <%s> --> <%s>" % (title, message))
        if buttons:
            self.messagebox.setStandardButtons(buttons)
        else:
            self.messagebox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            buttons = QtWidgets.QMessageBox.Ok
        if buttons & QtWidgets.QMessageBox.Save:
            self.messagebox.button(QtWidgets.QMessageBox.Save).setText("Guardar")
        if buttons & QtWidgets.QMessageBox.Cancel:
            self.messagebox.button(QtWidgets.QMessageBox.Cancel).setText("Cancelar")
        if buttons & QtWidgets.QMessageBox.Discard:
            self.messagebox.button(QtWidgets.QMessageBox.Discard).setText("Descartar")
        if buttons & QtWidgets.QMessageBox.Yes:
            self.messagebox.button(QtWidgets.QMessageBox.Yes).setText("Sí")
        if buttons & QtWidgets.QMessageBox.Close:
            self.messagebox.button(QtWidgets.QMessageBox.Close).setText("Cerrar")
        if type == 'INFO':
            self.messagebox.setIconPixmap(QtGui.QPixmap("./icons/icons8-información-40.png"))
        if type == 'QUESTION':
            self.messagebox.setIconPixmap(QtGui.QPixmap("./icons/icons8-ayuda-40.png"))
        if type == 'WARNING':
            self.messagebox.setIconPixmap(QtGui.QPixmap("./icons/icons8-error-40.png"))
        if type == 'ERROR':
            self.messagebox.setIconPixmap(QtGui.QPixmap("./icons/icons8-alta-prioridad-40.png"))
        if type == 'OK':
            self.messagebox.setIconPixmap(QtGui.QPixmap("./icons/icons8-marca-de-verificación-40.png"))
        self.messagebox.setWindowTitle(title)
        self.messagebox.setText(message)
        return self.messagebox.exec_()

    def openFile(self):
        logging.debug("Showing File Dialog to open file ...")
        self.filebrowser = QtWidgets.QFileDialog(self.centralwidget)
        self.filename, filter = self.filebrowser.getOpenFileName()
        logging.debug("File selected: %s" % self.filename)
        if self.filename:
            try:
                logging.debug("Trying to open file %s" % self.filename)
                f = open(self.filename, "rb")
                logging.debug("Trying to load attributes data")
                self.attributes = pickle.load(f)
                logging.debug("Trying to load subventions data")
                self.subventions = pickle.load(f)
                f.close()
                logging.debug("File %s loaded and closed" % self.filename)
                self.loadData()
                self.showMessage("Fichero cargado", "El fichero se ha cargado correctamente", type = "OK")
                self.mainWindow.setWindowTitle("%s" % self.filename)
            except Exception as e:
                logging.error("Error loading file %s. Reason: %s" % (self.filename, e))
                self.showMessage("Error cargando fichero", "Error abriendo el fichero %s: %s" % (self.filename, e), type = "ERROR")

    def saveFile(self):
        logging.debug("Showing File Dialog to save file ...")
        self.filebrowser = QtWidgets.QFileDialog(self.centralwidget)
        if not self.filename:
            filename, filter = self.filebrowser.getSaveFileName()
        else:
            filename = self.filename
        logging.debug("File selected: %s" % filename)
        if filename:
            try:
                logging.debug("Trying to open file %s" % self.filename)
                f = open(filename, "wb")
                logging.debug("Trying to dump attributes data")
                pickle.dump(self.attributes, f)
                logging.debug("Trying to dump subventions data")
                pickle.dump(self.subventions, f)
                f.close()
                logging.debug("File %s saved and closed" % self.filename)
                self.isEdited = False
                self.showMessage("Fichero guardado", "El fichero se ha guardado correctamente", type = "OK")
                self.filename = filename
                self.mainWindow.setWindowTitle("%s" % self.filename)
                self.statusbar.showMessage("Fichero %s guardado correctamente" % self.filename, 10000)
            except Exception as e:
                logging.error("Error saving file %s. Reason: %s" % (self.filename, e))
                self.showMessage("Error guardando fichero", "Error guardando el fichero %s: %s" % (self.filename, e), type = "ERROR")

    def saveFileAs(self):
        logging.debug("Showing File Dialog to save file as...")
        self.filebrowser = QtWidgets.QFileDialog(self.centralwidget)
        filename, filter = self.filebrowser.getSaveFileName()
        logging.debug("File selected: %s" % filename)
        if filename:
            try:
                logging.debug("Trying to open file %s" % self.filename)
                f = open(filename, "wb")
                logging.debug("Trying to dump attributes data")
                pickle.dump(self.attributes, f)
                logging.debug("Trying to dump subventions data")
                pickle.dump(self.subventions, f)
                f.close()
                logging.debug("File %s saved and closed" % self.filename)
                self.isEdited = False
                self.showMessage("Fichero guardado", "El fichero se ha guardado correctamente", type = "OK")
                self.filename = filename
                self.mainWindow.setWindowTitle("%s" % self.filename)
                self.statusbar.showMessage("Fichero %s guardado correctamente" % self.filename, 10000)
            except Exception as e:
                logging.error("Error saving file %s. Reason: %s" % (self.filename, e))
                self.showMessage("Error guardando fichero", "Error guardando el fichero %s: %s" % (self.filename, e), type = "ERROR")

    def newFile(self):
        logging.debug("newFile called")
        if not self.isEdited:
            logging.debug("Previous file is not edited")
            self.clearAttributesTab(full = True)
            self.clearAttributesTab(full = True)
            self.clearSubventionsTab(full = True)
            self.clearSubventionsTab(full = True)
            self.attributes = {}
            self.subventions = {}
            self.filename = None
            self.isEdited = False
            self.mainWindow.setWindowTitle("Fichero nuevo")
            self.statusbar.showMessage("Inicio de fichero de configuración nuevo", 10000)
        else:
            logging.info("Showing message to confirm changes before create new file")
            ret = self.showMessage("Cambios no guardados", "Si crea uno nuevo perderá los cambios, ¿desea continuar?", type = "QUESTION",
                                   buttons = QtWidgets.QMessageBox.Save | QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.Discard)
            if (ret == QtWidgets.QMessageBox.Yes):
                logging.info("Ignoring changes")
                self.isEdited = False
                self.newFile()
            elif (ret == QtWidgets.QMessageBox.Save):
                logging.info("Saving changes")
                self.saveFile()
                self.newFile()
            else:
                logging.info("Canceling new file request")
        self.newAttributeButton.setEnabled(True)
        self.editAttributeButton.setEnabled(True)
        self.deleteAttributeButton.setEnabled(True)
        self.newSubventionButton.setEnabled(True)
        self.editSubventionButton.setEnabled(True)
        self.deleteSubventionButton.setEnabled(True)

    def exit(self):
        if not self.isEdited:
            logging.info("Exiting! Good bye!")
            self.app.quit()
        else:
            logging.info("Changes detected befor to exit, showing message to retrieve confirmation.")
            ret = self.showMessage("Cambios no guardados", "Si sale perderá los cambios, ¿desea salir?", type = "QUESTION",
                                   buttons = QtWidgets.QMessageBox.Save | QtWidgets.QMessageBox.Cancel | QtWidgets.QMessageBox.Close)
            if (ret == QtWidgets.QMessageBox.Close):
                logging.info("Exiting ignoring changes! Good bye!")
                self.app.quit()
            if (ret == QtWidgets.QMessageBox.Save):
                logging.info("Trying to save changes")
                self.saveFile()
                self.exit()

    def about(self):
        self.messagebox.about(self.mainWindow, "Acerca de", "Herramienta de configuración de prestaciones y atributos para EAPN Madrid\nDesarrollado por Joaquín Gaspar Medina Arco")

    def clearAttributesTab(self, full = True):
        logging.debug("Clearing attributes tab with full at %s" % full)
        self.attributeHelpField.clear()
        self.attributeNameField.clear()
        self.attributeQuestionField.clear()
        self.valuesTable.clearContents()
        for i in range(self.valuesTable.rowCount()):
            self.valuesTable.removeRow(i)
        self.enableAttributeButtons(False)
        if (full):
            self.attributesListWidget.clear()
        self.mainWindow.repaint()

    def enableAttributeButtons(self, enable):
        if (enable):
            logging.debug("Enabling attribute buttons")
        else:
            logging.debug("Disabling attribute buttons")
        self.attributeHelpField.setEnabled(enable)
        self.attributeNameField.setEnabled(enable)
        self.attributeQuestionField.setEnabled(enable)
        self.attributeTypeField.setEnabled(enable)
        self.valuesTable.setEnabled(enable)
        self.newValueButton.setEnabled(enable)
        self.deleteValueButton.setEnabled(enable)
        self.saveAttributeButton.setEnabled(enable)

    def loadAttributes(self):
        logging.info("Loading attributes data")
        self.clearAttributesTab()
        self.attributeComboBox.clear()
        for attribute in self.attributes.keys():
            logging.debug("Loading attribute %s data" % attribute)
            item = QtWidgets.QListWidgetItem(attribute)
            item.setText(attribute)
            self.attributesListWidget.addItem(item)
        self.attributeComboBox.addItems(sorted(self.attributes.keys()))
        self.subventionValuesManager()
        self.statusbar.showMessage("%s atributos cargados" % self.attributesListWidget.count(), 10000)

    def loadData(self):
        logging.info("Loading data")
        self.clearAttributesTab()
        self.clearSubventionsTab()
        for attribute in self.attributes.keys():
            logging.debug("Loading attribute %s data" % attribute)
            item = QtWidgets.QListWidgetItem(attribute)
            item.setText(attribute)
            self.attributesListWidget.addItem(item)
        self.attributeComboBox.addItems(sorted(self.attributes.keys()))
        self.subventionValuesManager()
        for subventionId in self.subventions.keys():
            logging.debug("Loading subvention %s data" % self.subventions[subventionId]['TITLE'])
            item = QtWidgets.QListWidgetItem(str(subventionId))
            item.setText(self.subventions[subventionId]['NAME'])
            self.subventionsListWidget.addItem(item)
        self.statusbar.showMessage("%s atributos y %s prestaciones cargadas" % (self.attributesListWidget.count(), self.subventionsListWidget.count()), 10000)

    def loadAttributeData(self):
        logging.debug("loadAttributeData called")
        self.attributeEditionEnabled = False
        self.enableAttributeButtons(False)
        self.saveAttributeButton.setEnabled(False)
        self.newAttributeButton.setEnabled(True)
        self.editAttributeButton.setEnabled(True)
        self.deleteAttributeButton.setEnabled(True)
        if self.attributesListWidget.currentItem():
            logging.info("Loading data for attribute %s" % self.attributesListWidget.currentItem().text())
            attribute_name = self.attributesListWidget.currentItem().text()
            logging.debug("Attribute data to be loaded: %s" % self.attributes[attribute_name])
            self.attributeNameField.setText(attribute_name)
            self.attributeQuestionField.setText(self.attributes[attribute_name].get("QUESTION", ""))
            self.attributeHelpField.setText(self.attributes[attribute_name].get("HELP", ""))
            self.valuesTable.clearContents()
            self.valuesTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
            if self.attributes[attribute_name].get('VALUES', None):
                self.valuesTable.setRowCount(len(self.attributes[attribute_name]['VALUES']))
                for i in range(len(self.attributes[attribute_name]['VALUES'])):
                    item = QtWidgets.QTableWidgetItem(self.attributes[attribute_name]['VALUES'][i])
                    self.valuesTable.setItem(i, 0, item)
                    if self.attributes[attribute_name]['HELPERS'] is not None:
                        item = QtWidgets.QTableWidgetItem(self.attributes[attribute_name]['HELPERS'][i])
                        self.valuesTable.setItem(i, 1, item)
                    else:
                        item = QtWidgets.QTableWidgetItem("")
                        self.valuesTable.setItem(i, 1, item)
            attributeType = self.attributes[attribute_name]['TYPE']
            if attributeType == float:
                logging.debug("Setting attribute type to %s" % self.attributeTypeField.itemText(1))
                self.attributeTypeField.setCurrentIndex(1)
                self.valuesTable.setRowCount(0)
            elif attributeType == list:
                logging.debug("Setting attribute type to %s" % self.attributeTypeField.itemText(2))
                self.attributeTypeField.setCurrentIndex(2)
            else:
                logging.debug("Setting attribute type to %s" % self.attributeTypeField.itemText(0))
                self.attributeTypeField.setCurrentIndex(0)

    def editAttributeData(self):
        logging.debug("editAttributeData called")
        if self.attributesListWidget.currentItem():
            logging.info("Edition enabled for attribute %s" % self.attributesListWidget.currentItem().text())
            self.attributeEditionEnabled = True
            self.previousAttributeName = self.attributesListWidget.currentItem().text()
            self.enableAttributeButtons(True)
            self.saveAttributeButton.setEnabled(True)
            self.newAttributeButton.setEnabled(False)
            self.editAttributeButton.setEnabled(False)
            self.deleteAttributeButton.setEnabled(False)
            self.attributeValuesManager()
        else:
            logging.info("Edition for attribute not enabled because any attribute was selected")
            self.showMessage("Selecciona un atributo", "Para editar atributos debes seleccionar uno.", type = "INFO")

    def newAttributeData(self):
        logging.debug("newAttributeData called")
        logging.info("New attribute form activated")
        self.enableAttributeButtons(True)
        self.saveAttributeButton.setEnabled(True)
        self.newAttributeButton.setEnabled(False)
        self.editAttributeButton.setEnabled(False)
        self.deleteAttributeButton.setEnabled(False)
        self.attributeHelpField.clear()
        self.attributeNameField.clear()
        self.attributeQuestionField.clear()
        self.attributeTypeField.setCurrentIndex(0)
        self.newValueButton.setEnabled(False)
        self.deleteValueButton.setEnabled(False)
        self.valuesTable.clearContents()
        self.attributeEditionEnabled = True
        self.attributeValuesManager()

    def deleteAttributeData(self):
        logging.debug("editAttributeData called")
        if self.attributesListWidget.currentItem():
            logging.info("Deleting attribute %s" % self.attributesListWidget.currentItem().text())
            logging.info("Showing message to retrieve confirmation.")
            ret = self.showMessage("Borrar atributo", "¿Está seguro de borrar el atributo %s" % self.attributesListWidget.currentItem().text(), type = "QUESTION",
                                   buttons = QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
            if ret == QtWidgets.QMessageBox.Yes:
                logging.info("Deletion confirmed")
                attribute = self.attributesListWidget.takeItem(self.attributesListWidget.currentRow())
                self.attributes.pop(attribute.text())
                self.attributesListWidget.setCurrentItem(None)
                self.clearAttributesTab(full = False)
                self.statusbar.showMessage("Atributo %s eliminado" % attribute.text(), 10000)
                self.loadAttributes()
            else:
                logging.info("Deletion canceled")
            self.enableAttributeButtons(False)
        else:
            self.showMessage("Selecciona un atributo", "Para borrar atributos debes seleccionar uno.", type = "INFO")

    def saveAttributeData(self):
        logging.debug("editAttributeData called")
        name = self.attributeNameField.text()
        logging.info("Trying to save attribute %s" % name)
        if name == '':
            logging.warning("Attribute without name")
            self.showMessage("Indica nombre", "El nombre del atributo es obligatorio", type = "ERROR")
            return
        if self.attributeQuestionField.toPlainText() == '':
            logging.warning("Attribute without question")
            self.showMessage("Indica pregunta", "La pregunta del atributo es obligatoria", type = "ERROR")
            return
        if self.attributeTypeField.currentIndex() == 2 and self.valuesTable.rowCount() == 0:  # Lista
            logging.warning("Attribute without values")
            self.showMessage("Opciones", "Los atributos de tipo 'Lista de opciones' requieren al menos de una opción", type = "ERROR")
            return
        if self.previousAttributeName and self.previousAttributeName != name:
            logging.info("Attribute %s has changed its name for %s" % (self.previousAttributeName, name))
            self.attributes.pop(self.previousAttributeName)
            self.attributesListWidget.currentItem().setText(name)
            self.changeAttributeName(self.previousAttributeName, name)
        elif not self.previousAttributeName and self.attributesListWidget.findItems(name, QtCore.Qt.MatchExactly):
            self.showMessage("Atributo ya existente", "Ya existe un atributo con el nombre %s" % name, type = "ERROR")
            return
        logging.debug("Updating attributes dictionary")
        self.attributes[name] = {'QUESTION': self.attributeQuestionField.toPlainText(),
                                 'HELP': self.attributeHelpField.toPlainText(),
                                 'VALUES': [],
                                 'HELPERS': []}
        if self.attributeTypeField.currentIndex() == 0:
            logging.debug("Type is bool")
            self.attributes[name]['TYPE'] = bool
            for i in range(self.valuesTable.rowCount()):
                self.attributes[name]['VALUES'].append(self.valuesTable.item(i, 0).text())
                self.attributes[name]['HELPERS'].append(self.valuesTable.item(i, 1).text())
        elif self.attributeTypeField.currentIndex() == 1:
            logging.debug("Type is float")
            self.attributes[name]['TYPE'] = float
            self.attributes[name]['VALUES'] = None
            self.attributes[name]['HELPERS'] = None
        else:
            self.attributes[name]['TYPE'] = list
            logging.debug("Type is list")
            for i in range(self.valuesTable.rowCount()):
                logging.debug("Adding values %s  %s" % (self.valuesTable.item(i, 0).text(), self.valuesTable.item(i, 1).text()))
                self.attributes[name]['VALUES'].append(self.valuesTable.item(i, 0).text())
                self.attributes[name]['HELPERS'].append(self.valuesTable.item(i, 1).text())
        self.isEdited = True
        self.enableAttributeButtons(False)
        self.newAttributeButton.setEnabled(True)
        self.editAttributeButton.setEnabled(True)
        self.deleteAttributeButton.setEnabled(True)
        self.attributeEditionEnabled = False
        self.previousAttributeName = None
        self.loadData()
        self.statusbar.showMessage("Atributo %s guardado" % name, 10000)

    def attributeValuesManager(self, index = None):
        logging.debug("attributeValuesManager called for index %s" % index)
        if not self.attributeEditionEnabled:
            logging.debug("Attribute edition is not active, nothing to do")
            return
        if not index:
            logging.debug("Index is not provided, taking current one")
            index = self.attributeTypeField.currentIndex()
        if index == 0:
            logging.debug("Activating only list for bool type")
            self.valuesTable.setEnabled(True)
            self.newValueButton.setEnabled(False)
            self.deleteValueButton.setEnabled(False)
            self.valuesTable.setRowCount(2)
            self.valuesTable.setItem(0, 0, QtWidgets.QTableWidgetItem("Sí"))
            self.valuesTable.setItem(0, 1, QtWidgets.QTableWidgetItem(""))
            self.valuesTable.setItem(1, 0, QtWidgets.QTableWidgetItem("No"))
            self.valuesTable.setItem(1, 1, QtWidgets.QTableWidgetItem(""))
        if index == 2:
            logging.debug("Activating all for list type")
            self.newValueButton.setEnabled(True)
            self.deleteValueButton.setEnabled(True)
            self.deleteValueButton.setEnabled(True)
            self.valuesTable.setEnabled(True)
        if index == 1:
            logging.debug("Activating nothing for float type")
            self.newValueButton.setEnabled(False)
            self.deleteValueButton.setEnabled(False)
            self.valuesTable.setEnabled(False)

    def deleteAttributeValue(self):
        logging.debug("deleteAttributeValue called")
        if self.valuesTable.currentRow() == -1:
            logging.error("Attribute value deletion is not available because any value was selected")
            self.showMessage("Selecciona una fila", "Para borrar valores debes seleccionar uno.", type = "INFO")
            return
        rows = []
        for item in self.valuesTable.selectedItems():
            if item.row() not in rows:
                rows.append(item.row())
        rows.sort(reverse = True)
        for row in rows:
            if self.valuesTable.item(row, 0) and self.valuesTable.item(row, 1):
                logging.info("Removing attribute value %s - %s" % (self.valuesTable.item(row, 0).text(), self.valuesTable.item(row, 1).text()))
            else:
                logging.info("Removing attribute value at row %s" % (row))
            self.valuesTable.removeRow(row)
            self.statusbar.showMessage("Valor eliminado", 10000)

    def newAttributeValue(self):
        logging.debug("newAttrivuteValue called")
        logging.info("Adding new attribute value for attribute %s, current size: %s" % (self.attributeNameField.text(), self.valuesTable.rowCount()))
        self.valuesTable.setRowCount(self.valuesTable.rowCount() + 1)
        self.statusbar.showMessage("Valor añadido", 10000)

    def clearSubventionsTab(self, full = True):
        logging.debug("Clearing subventions tab with full at %s" % full)
        self.subventionActiveField.setCheckState(False)
        self.subventionNameField.clear()
        self.subventionTitleField.clear()
        self.subventionLawField.clear()
        self.subventionDescriptionField.clear()
        self.subventionLawURLField.clear()
        self.subventionRequestURLField.clear()
        self.subventionRulesWidget.clear()
        self.subventionIncompatibilitiesField.clear()
        self.attributeComboBox.clear()
        self.valuesComboBox.clear()
        self.enableSubventionButtons(False)
        if (full):
            self.subventionsListWidget.clear()

    def enableSubventionButtons(self, enable):
        if (enable):
            logging.debug("Enabling subvention buttons")
        else:
            logging.debug("Disabling subvention buttons")
        self.subventionActiveField.setEnabled(enable)
        self.subventionNameField.setEnabled(enable)
        self.subventionTitleField.setEnabled(enable)
        self.subventionLawField.setEnabled(enable)
        self.subventionDescriptionField.setEnabled(enable)
        self.subventionLawURLField.setEnabled(enable)
        self.subventionRequestURLField.setEnabled(enable)
        self.subventionIncompatibilitiesField.setEnabled(enable)
        self.subventionRulesWidget.setEnabled(enable)
        self.saveSubventionButton.setEnabled(enable)
        self.newAndConditionButton.setEnabled(enable)
        self.newOrConditionButton.setEnabled(enable)
        self.deleteConditionButton.setEnabled(enable)
        self.attributeComboBox.setEnabled(enable)
        self.operatorComboBox.setEnabled(enable)
        self.valuesComboBox.setEnabled(enable)
        self.conditionValueField.setEnabled(enable)

    def loadSubventionData(self):
        logging.debug("loadSubventionData called")
        self.subventionEditionEnabled = False
        self.enableSubventionButtons(False)
        self.saveSubventionButton.setEnabled(False)
        self.newSubventionButton.setEnabled(True)
        self.editSubventionButton.setEnabled(True)
        self.deleteSubventionButton.setEnabled(True)
        if self.subventionsListWidget.currentItem():
            logging.info("Loading data for subvention %s" % self.subventionsListWidget.currentItem().text())
            subId = self.getSubventionId(self.subventionsListWidget.currentItem().text())
            logging.debug("Subvention data to be loaded: %s" % self.subventions[subId])
            self.subventionActiveField.setChecked(self.subventions[subId].get("ACTIVE", True))
            self.subventionNameField.setText(self.subventions[subId].get("NAME", ""))
            self.subventionTitleField.setText(self.subventions[subId].get("TITLE", ""))
            self.subventionLawField.setText(self.subventions[subId].get("LAW", ""))
            self.subventionDescriptionField.setText(self.subventions[subId].get("DESCRIPTION", ""))
            self.subventionLawURLField.setText(self.subventions[subId].get("LAWURL", ""))
            self.subventionRequestURLField.setText(self.subventions[subId].get("REQUESTURL", ""))
            self.subventionIncompatibilitiesField.setText(self.subventions[subId].get("INCOMPATIBILITIES", ""))
            self.subventionRulesWidget.clear()
            count = 1
            for conditionCombined in self.subventions[subId].get('CONDITIONS', []):
                parent = QtWidgets.QTreeWidgetItem(self.subventionRulesWidget)
                parent.setText(0, str(count))
                for condition in conditionCombined:
                    attribute, operator, value = condition
                    child = QtWidgets.QTreeWidgetItem(parent)
                    child.setText(1, attribute)
                    if operator in ('=', 'IN'):
                        child.setText(2, "Es igual a")
                    if operator in ('!=', 'NOT IN'):
                        child.setText(2, "Es diferente a")
                    if operator == '>':
                        child.setText(2, "Es mayor que")
                    if operator == '>=':
                        child.setText(2, "Es mayor o igual que")
                    if operator == '<':
                        child.setText(2, "Es menor que")
                    if operator == '<=':
                        child.setText(2, "Es menor o igual que")
                    if isinstance(value, list):
                        if len(value) == 1:
                            child.setText(3, value[0])
                        else:
                            child.setText(3, str(value))
                    elif isinstance(value, int):
                        child.setText(3, str(value))
                    else:
                        child.setText(3, value)
                    logging.debug("Condition loaded with data: %s %s %s" % (child.text(1), child.text(2), child.text(3)))
                count += 1
                parent.setExpanded(True)

    def editSubventionData(self):
        logging.debug("editSubventionData called")
        if self.subventionsListWidget.currentItem():
            logging.info("Edition enabled for subvention %s" % self.subventionsListWidget.currentItem().text())
            self.subventionEditionEnabled = True
            self.previousSubventionName = self.subventionsListWidget.currentItem().text()
            self.enableSubventionButtons(True)
            self.saveSubventionButton.setEnabled(True)
            self.newSubventionButton.setEnabled(False)
            self.editSubventionButton.setEnabled(False)
            self.deleteSubventionButton.setEnabled(False)
        else:
            logging.info("Edition for subvention not enabled because any attribute was selected")
            self.showMessage("Selecciona una prestación", "Para editar prestaciones debes seleccionar una.", type = "INFO")

    def newSubventionData(self):
        logging.debug("newSubventionData called")
        logging.info("New subvention form activated")
        self.enableSubventionButtons(True)
        self.saveSubventionButton.setEnabled(True)
        self.newSubventionButton.setEnabled(False)
        self.editSubventionButton.setEnabled(False)
        self.deleteSubventionButton.setEnabled(False)
        self.subventionActiveField.setCheckState(False)
        self.subventionNameField.clear()
        self.subventionTitleField.clear()
        self.subventionLawField.clear()
        self.subventionDescriptionField.clear()
        self.subventionLawURLField.clear()
        self.subventionRequestURLField.clear()
        self.subventionRulesWidget.clear()
        self.subventionEditionEnabled = True

    def deleteSubventionData(self):
        logging.debug("deleteSubventionData called")
        if self.subventionsListWidget.currentItem():
            logging.info("Deleting subvention %s" % self.subventionsListWidget.currentItem().text())
            logging.info("Showing message to retrieve confirmation.")
            ret = self.showMessage(self.centralwidget, "Borrar prestación", "¿Está seguro de borrar la prestación %s" % self.subventionsListWidget.currentItem().text(), type = "QUESTION",
                                   buttons = QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
            if ret == QtWidgets.QMessageBox.Yes:
                logging.info("Deletion confirmed")
                subvention = self.subventionsListWidget.takeItem(self.subventionsListWidget.currentRow())
                self.subventions.pop(self.getSubventionId(subvention.text()))
                self.subventionsListWidget.setCurrentItem(None)
                self.clearSubventionsTab(full = False)
                self.statusbar.showMessage("Prestación %s eliminada" % subvention.text(), 10000)
                # self.loadData()
            else:
                logging.info("Deletion canceled")
            self.enableSubventionButtons(False)
        else:
            self.showMessage("Selecciona una prestación", "Para borrar prestaciones debes seleccionar una.", type = "INFO")

    def saveSubventionData(self):
        logging.debug("saveSubventionData called")
        name = self.subventionNameField.text()
        logging.info("Trying to save subvention %s" % name)
        if name == '':
            logging.warning("Subvention without name")
            self.showMessage("Indica nombre", "El nombre de la prestación es obligatorio", type = "ERROR")
            return
        if self.subventionTitleField.toPlainText() == '':
            logging.warning("Subvention without title")
            self.showMessage("Indica título", "El título de la prestación es obligatorio", type = "ERROR")
            return
        if self.previousSubventionName and self.previousSubventionName != name:
            logging.info("Subvention %s has changed its name for %s" % (self.previousSubventionName, name))
            self.subventionsListWidget.currentItem().setText(name)
        elif not self.previousSubventionName and self.subventionsListWidget.findItems(name, QtCore.Qt.MatchExactly):
            self.showMessage("Prestación ya existente", "Ya existe una prestación con el nombre %s" % name, type = "ERROR")
            return
        logging.debug("Updating subvention dictionary")
        if (self.previousSubventionName):
            subId = self.getSubventionId(self.previousSubventionName)
        else:
            subId = self.getNextSubventionId()

        conditions = []
        for i in range(self.subventionRulesWidget.topLevelItemCount()):
            rule = self.subventionRulesWidget.topLevelItem(i)
            newRule = []
            if rule.childCount() == 0:
                continue
            for childId in range(rule.childCount()):
                child = rule.child(childId)
                attribute = child.text(1)
                operator = child.text(2)
                value = child.text(3)
                try:
                    value = eval(value)
                except:
                    pass
                if operator == 'Es igual a':
                    if isinstance(value, list):
                        operator = 'IN'
                    else:
                        operator = '='
                if operator == 'Es diferente a':
                    if isinstance(value, list):
                        operator = 'NOT IN'
                    else:
                        operator = '!='
                if operator == 'Es mayor que':
                    operator = ">"
                if operator == 'Es mayor o igual que':
                    operator = ">="
                if operator == 'Es menor que':
                    operator = "<"
                if operator == 'Es menor o igual que':
                    operator = "<="
                newRule.append((attribute, operator, value))
            conditions.append(newRule)
        self.subventions[subId] = {'NAME': self.subventionNameField.text(),
                                   'TITLE': self.subventionTitleField.toPlainText(),
                                   'LAW': self.subventionLawField.toPlainText(),
                                   'DESCRIPTION': self.subventionDescriptionField.toPlainText(),
                                   'LAWURL': self.subventionLawURLField.text(),
                                   'REQUESTURL': self.subventionRequestURLField.text(),
                                   'INCOMPATIBILITIES': self.subventionIncompatibilitiesField.toPlainText(),
                                   'CONDITIONS': conditions}

        self.isEdited = True
        self.enableSubventionButtons(False)
        self.newSubventionButton.setEnabled(True)
        self.editSubventionButton.setEnabled(True)
        self.deleteSubventionButton.setEnabled(True)
        self.subventionEditionEnabled = False
        self.previousSubventionName = None
        self.loadData()
        self.statusbar.showMessage("Prestación %s guardada" % name, 10000)

    def deleteCondition(self):
        logging.debug("deleteCondition called")
        if self.subventionRulesWidget.selectedItems() == []:
            logging.error("Condition deletion is not available because any rule was selected")
            self.showMessage("Selecciona una fila", "Para borrar condiciones debes seleccionar una.", type = "INFO")
            return
        for item in self.subventionRulesWidget.selectedItems():
            logging.info("Removing condition item %s %s %s %s from subvention %s" % (item.text(0), item.text(1), item.text(2), item.text(3), self.subventionNameField.text()))
            parent = item.parent()
            if (parent):
                parent.removeChild(item)
                if parent.childCount() == 0:
                    logging.info("Removing condidition %s from subvention %s" % (parent.text(0), self.subventionNameField.text()))
                    self.subventionRulesWidget.takeTopLevelItem(self.subventionRulesWidget.indexOfTopLevelItem(parent))
            else:
                self.subventionRulesWidget.takeTopLevelItem(self.subventionRulesWidget.indexOfTopLevelItem(item))
            for i in range(self.subventionRulesWidget.topLevelItemCount()):
                self.subventionRulesWidget.topLevelItem(i).setText(0, str(i + 1))
        self.statusbar.showMessage("Condición eliminada", 10000)

    def newAndCondition(self):
        logging.debug("newAndCondition called")
        logging.info("Adding new AND condition for subvention %s" % (self.subventionNameField.text()))
        parent = QtWidgets.QTreeWidgetItem(self.subventionRulesWidget)
        parent.setText(0, str(self.subventionRulesWidget.topLevelItemCount()))
        parent.setExpanded(True)
        self.statusbar.showMessage("Regla añadido", 10000)

    def newORCondition(self):
        logging.debug("newORCondition called")
        if self.subventionRulesWidget.selectedItems() == []:
            logging.error("OR Condition insertion is not available because any rule was selected")
            self.showMessage("Selecciona una fila", "Para insertar una condicione debes seleccionar una regla.", type = "INFO")
            return
        if self.attributeComboBox.currentText() == "":
            logging.error("OR Condition insertion is not available because there is no attributes")
            self.showMessage("No hay atributos", "Para insertar una condicione debe existir al menos un atributo", type = "INFO")
            return
        logging.info("Adding new OR condition for subvention %s" % (self.subventionNameField.text()))
        item = self.subventionRulesWidget.selectedItems()[0]
        if item.parent():
            item = item.parent()
        newCondition = QtWidgets.QTreeWidgetItem()
        newCondition.setText(1, self.attributeComboBox.currentText())
        newCondition.setText(2, self.operatorComboBox.currentText())
        if self.valuesComboBox.isVisible():
            if not len(self.valuesComboBox.currentData()):
                logging.error("OR Condition insertion is not available because there is no values selected")
                self.showMessage("Valores no seleccionados", "Debes seleccionar al menos un valor para el atributo %s" % self.attributeComboBox.currentText(), type = "INFO")
                return
            if len(self.valuesComboBox.currentData()) > 1:
                newCondition.setText(3, str(self.valuesComboBox.currentData()))
            else:
                newCondition.setText(3, self.valuesComboBox.currentData()[0])
        else:
            try:
                float(self.conditionValueField.text())
            except:
                logging.error("OR Condition insertion is not available because there is no attributes")
                self.showMessage("Dato incorrecto", "El valor del atributo %s debe ser numérico" % self.attributeComboBox.currentText(), type = "WARNING")
                return
            newCondition.setText(3, self.conditionValueField.text())
        item.addChild(newCondition)
        logging.info("OR condition %s %s %s added" % (newCondition.text(1), newCondition.text(2), newCondition.text(3)))
        self.statusbar.showMessage("Condición añadida", 10000)

    def subventionValuesManager(self):
        logging.debug("subventionValuesManager called for attribute %s" % self.attributeComboBox.currentText())
        if self.attributeComboBox.currentIndex() == -1:
            logging.debug("Nothing to do")
            return
        attribute = self.attributeComboBox.currentText()
        self.valuesComboBox.clear()
        if self.attributes[attribute]['TYPE'] == float:
            logging.debug("Activating Float field for %s attribute" % attribute)
            self.valuesComboBox.setVisible(False)
            self.conditionValueField.setVisible(True)
            return
        else:
            logging.debug("Activating values for %s attribute" % attribute)
            self.valuesComboBox.setVisible(True)
            self.conditionValueField.setVisible(False)
            for value in self.attributes[attribute]['VALUES']:
                logging.debug("Adding value --> %s" % value)
                self.valuesComboBox.addItem(value)

    def getSubventionId(self, name):
        for sub in self.subventions:
            if self.subventions[sub]['NAME'] == name:
                return sub
        return None

    def getNextSubventionId(self):
        ids = sorted(self.subventions.keys())
        i = 1
        for i in range(1, len(ids)):
            if ids[i] != ids[i - 1] + 1:
                return ids[i - 1] + 1
        return i

    def changeAttributeName(self, oldName, newName):
        logging.info("Changing attribute name for %s to %s in all subventions" % (oldName, newName))
        for subId in self.subventions.keys():
            for rule in self.subventions[subId].get('CONDITIONS', []):
                for i in range(len(rule)):
                    attribute, operator, value = rule[i]
                    if attribute == oldName:
                        newCondition = (newName, operator, value)
                        logging.debug("Changing attribute for condition %s in subvention %s" % (rule[i], self.subventions[subId]['NAME']))
                        rule[i] = newCondition


if __name__ == "__main__":
    import sys

    logging.info("Starting SubventionsConfigTool!")
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.customUI()
    ui.setApp(app)
    MainWindow.show()
    app.setApplicationName("Subventions Config Tool")
    app.setApplicationVersion("1.0")
    app.setApplicationDisplayName("Subventions Config Tool")
    app.aboutToQuit.connect(ui.exit)
    logging.info("SubventionsConfigTool started!")
    sys.exit(app.exec_())
